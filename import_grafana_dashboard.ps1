# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞ Node Exporter Full –≤ Grafana
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\import_grafana_dashboard.ps1

Write-Host "=== –ò–º–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞ Node Exporter Full –≤ Grafana ===" -ForegroundColor Cyan
Write-Host ""

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
$GRAFANA_URL = "http://62.84.112.42:3000"
$GRAFANA_USER = "admin"
$GRAFANA_PASSWORD = "DevOps2025!"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
$DASHBOARD_ID = 1860

# –°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Basic Auth
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${GRAFANA_USER}:${GRAFANA_PASSWORD}"))
$headers = @{
    "Authorization" = "Basic $base64AuthInfo"
    "Content-Type" = "application/json"
}

Write-Host "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Grafana..." -ForegroundColor Yellow
try {
    $health = Invoke-RestMethod -Uri "$GRAFANA_URL/api/health" -Method Get -TimeoutSec 10
    Write-Host "   ‚úÖ Grafana –¥–æ—Å—Ç—É–ø–Ω–∞ (–≤–µ—Ä—Å–∏—è: $($health.version))" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..." -ForegroundColor Yellow
try {
    $user = Invoke-RestMethod -Uri "$GRAFANA_URL/api/user" -Method Get -Headers $headers -TimeoutSec 10
    Write-Host "   ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $($user.login))" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $_" -ForegroundColor Red
    Write-Host "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Å–∫—Ä–∏–ø—Ç–µ" -ForegroundColor Yellow
    exit 1
}

Write-Host ""
Write-Host "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Data Source Prometheus..." -ForegroundColor Yellow
try {
    $datasources = Invoke-RestMethod -Uri "$GRAFANA_URL/api/datasources" -Method Get -Headers $headers -TimeoutSec 10
    $prometheus = $datasources | Where-Object { $_.type -eq "prometheus" } | Select-Object -First 1
    
    if ($prometheus) {
        Write-Host "   ‚úÖ Prometheus Data Source –Ω–∞–π–¥–µ–Ω (ID: $($prometheus.id), Name: $($prometheus.name))" -ForegroundColor Green
        $PROMETHEUS_UID = $prometheus.uid
    } else {
        Write-Host "   ‚ùå Prometheus Data Source –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        Write-Host "   –°–æ–∑–¥–∞–π—Ç–µ Data Source –≤—Ä—É—á–Ω—É—é –≤ Grafana" -ForegroundColor Yellow
        exit 1
    }
} catch {
    Write-Host "   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Data Sources: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "4. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å Grafana.com..." -ForegroundColor Yellow
try {
    $dashboardJson = Invoke-RestMethod -Uri "https://grafana.com/api/dashboards/$DASHBOARD_ID/revisions/latest/download" -Method Get -TimeoutSec 30
    Write-Host "   ‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–∫–∞—á–∞–Ω (ID: $DASHBOARD_ID)" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞..." -ForegroundColor Yellow

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Data Source –≤ –¥–∞—à–±–æ—Ä–¥–µ
if ($dashboardJson.PSObject.Properties.Name -contains "__inputs") {
    foreach ($input in $dashboardJson.__inputs) {
        if ($input.type -eq "datasource" -and $input.pluginId -eq "prometheus") {
            $input.value = $PROMETHEUS_UID
        }
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ payload –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
$importPayload = @{
    dashboard = $dashboardJson
    overwrite = $true
    inputs = @(
        @{
            name = "DS_PROMETHEUS"
            type = "datasource"
            pluginId = "prometheus"
            value = $PROMETHEUS_UID
        }
    )
} | ConvertTo-Json -Depth 100

Write-Host "   ‚úÖ –î–∞—à–±–æ—Ä–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω" -ForegroundColor Green

Write-Host ""
Write-Host "6. –ò–º–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞ –≤ Grafana..." -ForegroundColor Yellow
try {
    $result = Invoke-RestMethod -Uri "$GRAFANA_URL/api/dashboards/import" -Method Post -Headers $headers -Body $importPayload -TimeoutSec 30
    Write-Host "   ‚úÖ –î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!" -ForegroundColor Green
    Write-Host "   Dashboard ID: $($result.dashboardId)" -ForegroundColor White
    Write-Host "   Dashboard UID: $($result.uid)" -ForegroundColor White
    Write-Host "   Dashboard URL: $GRAFANA_URL$($result.url)" -ForegroundColor White
} catch {
    Write-Host "   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞: $_" -ForegroundColor Red
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
    if ($_.Exception.Response) {
        $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
        $responseBody = $reader.ReadToEnd()
        Write-Host "   –î–µ—Ç–∞–ª–∏: $responseBody" -ForegroundColor Yellow
    }
    exit 1
}

Write-Host ""
Write-Host "=== –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù ===" -ForegroundColor Green
Write-Host ""
Write-Host "üìä –î–∞—à–±–æ—Ä–¥ 'Node Exporter Full' —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!" -ForegroundColor Cyan
Write-Host ""
Write-Host "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:" -ForegroundColor Yellow
Write-Host "   $GRAFANA_URL$($result.url)" -ForegroundColor White
Write-Host ""
Write-Host "–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Grafana:" -ForegroundColor Yellow
Write-Host "   1. –û—Ç–∫—Ä–æ–π—Ç–µ $GRAFANA_URL" -ForegroundColor White
Write-Host "   2. –í–æ–π–¥–∏—Ç–µ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (admin / –≤–∞—à_–ø–∞—Ä–æ–ª—å)" -ForegroundColor White
Write-Host "   3. –í –º–µ–Ω—é —Å–ª–µ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ 'Dashboards'" -ForegroundColor White
Write-Host "   4. –ù–∞–π–¥–∏—Ç–µ 'Node Exporter Full'" -ForegroundColor White
Write-Host ""
Write-Host "üí° –î–∞—à–±–æ—Ä–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç 40+ –ø–∞–Ω–µ–ª–µ–π —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏:" -ForegroundColor Cyan
Write-Host "   - CPU Usage (–ø–æ —è–¥—Ä–∞–º –∏ –æ–±—â–∏–π)" -ForegroundColor White
Write-Host "   - Memory Usage (–¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞)" -ForegroundColor White
Write-Host "   - Disk I/O (—á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å)" -ForegroundColor White
Write-Host "   - Network Traffic (–≤—Ö–æ–¥—è—â–∏–π/–∏—Å—Ö–æ–¥—è—â–∏–π)" -ForegroundColor White
Write-Host "   - System Load, Uptime, Processes" -ForegroundColor White
Write-Host ""

# –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
$openBrowser = Read-Host "–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ? (y/n)"
if ($openBrowser -eq "y" -or $openBrowser -eq "Y") {
    Start-Process "$GRAFANA_URL$($result.url)"
    Write-Host "‚úÖ –î–∞—à–±–æ—Ä–¥ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ" -ForegroundColor Green
}

Write-Host ""
Write-Host "–ì–æ—Ç–æ–≤–æ!" -ForegroundColor Green

