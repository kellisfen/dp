#!/usr/bin/env pwsh

<#
.SYNOPSIS
    –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–µ–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
.DESCRIPTION
    –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
.PARAMETER Action
    –î–µ–π—Å—Ç–≤–∏–µ: start, stop, restart, status, logs
.PARAMETER Profile
    –ü—Ä–æ—Ñ–∏–ª—å: all, basic, logging, tracing, postgres, redis, nginx
.EXAMPLE
    .\manage-monitoring.ps1 -Action start -Profile basic
    .\manage-monitoring.ps1 -Action start -Profile all
    .\manage-monitoring.ps1 -Action logs -Service prometheus
#>

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("start", "stop", "restart", "status", "logs", "cleanup")]
    [string]$Action,
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("all", "basic", "logging", "tracing", "postgres", "redis", "nginx")]
    [string]$Profile = "basic",
    
    [Parameter(Mandatory=$false)]
    [string]$Service = ""
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Red = "`e[31m"
$Green = "`e[32m"
$Yellow = "`e[33m"
$Blue = "`e[34m"
$Reset = "`e[0m"

function Write-ColorOutput {
    param([string]$Message, [string]$Color = $Reset)
    Write-Host "$Color$Message$Reset"
}

function Test-DockerCompose {
    try {
        $null = docker-compose --version
        return $true
    }
    catch {
        Write-ColorOutput "‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop." $Red
        return $false
    }
}

function Test-Docker {
    try {
        $null = docker --version
        $dockerStatus = docker info 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-ColorOutput "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop." $Red
            return $false
        }
        return $true
    }
    catch {
        Write-ColorOutput "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop." $Red
        return $false
    }
}

function Start-MonitoringStack {
    param([string]$Profile)
    
    Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç–µ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø—Ä–æ—Ñ–∏–ª—å: $Profile)..." $Blue
    
    switch ($Profile) {
        "basic" {
            docker-compose up -d prometheus grafana alertmanager node-exporter cadvisor blackbox-exporter
        }
        "logging" {
            docker-compose --profile logging up -d
        }
        "tracing" {
            docker-compose --profile tracing up -d
        }
        "postgres" {
            docker-compose --profile postgres up -d postgres-exporter
        }
        "redis" {
            docker-compose --profile redis up -d redis-exporter
        }
        "nginx" {
            docker-compose --profile nginx up -d nginx-exporter
        }
        "all" {
            docker-compose --profile logging --profile tracing --profile postgres --profile redis --profile nginx up -d
        }
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ –°—Ç–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!" $Green
        Show-ServiceUrls
    } else {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç–µ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!" $Red
    }
}

function Stop-MonitoringStack {
    Write-ColorOutput "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–µ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." $Yellow
    docker-compose down
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ –°—Ç–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" $Green
    } else {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–µ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!" $Red
    }
}

function Restart-MonitoringStack {
    param([string]$Profile)
    Write-ColorOutput "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç–µ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." $Yellow
    Stop-MonitoringStack
    Start-Sleep -Seconds 3
    Start-MonitoringStack -Profile $Profile
}

function Show-Status {
    Write-ColorOutput "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:" $Blue
    docker-compose ps
    
    Write-ColorOutput "`nüîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:" $Blue
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
}

function Show-Logs {
    param([string]$Service)
    
    if ($Service) {
        Write-ColorOutput "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ $Service:" $Blue
        docker-compose logs -f --tail=100 $Service
    } else {
        Write-ColorOutput "üìã –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:" $Blue
        docker-compose logs -f --tail=50
    }
}

function Show-ServiceUrls {
    Write-ColorOutput "`nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:" $Green
    Write-ColorOutput "‚îú‚îÄ‚îÄ Grafana:          http://localhost:3000 (admin/admin123)" $Green
    Write-ColorOutput "‚îú‚îÄ‚îÄ Prometheus:       http://localhost:9090" $Green
    Write-ColorOutput "‚îú‚îÄ‚îÄ AlertManager:     http://localhost:9093" $Green
    Write-ColorOutput "‚îú‚îÄ‚îÄ Node Exporter:    http://localhost:9100" $Green
    Write-ColorOutput "‚îú‚îÄ‚îÄ cAdvisor:         http://localhost:8080" $Green
    Write-ColorOutput "‚îú‚îÄ‚îÄ Blackbox:         http://localhost:9115" $Green
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    $runningContainers = docker-compose ps --services --filter "status=running"
    
    if ($runningContainers -contains "loki") {
        Write-ColorOutput "‚îú‚îÄ‚îÄ Loki:             http://localhost:3100" $Green
    }
    if ($runningContainers -contains "jaeger") {
        Write-ColorOutput "‚îú‚îÄ‚îÄ Jaeger UI:        http://localhost:16686" $Green
    }
    if ($runningContainers -contains "postgres-exporter") {
        Write-ColorOutput "‚îú‚îÄ‚îÄ PostgreSQL Exp:   http://localhost:9187" $Green
    }
    if ($runningContainers -contains "redis-exporter") {
        Write-ColorOutput "‚îú‚îÄ‚îÄ Redis Exporter:   http://localhost:9121" $Green
    }
    if ($runningContainers -contains "nginx-exporter") {
        Write-ColorOutput "‚îî‚îÄ‚îÄ Nginx Exporter:   http://localhost:9113" $Green
    }
}

function Cleanup-MonitoringStack {
    Write-ColorOutput "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–µ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." $Yellow
    docker-compose down -v --remove-orphans
    docker system prune -f
    
    Write-ColorOutput "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" $Green
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if (-not (Test-Docker)) {
    exit 1
}

if (-not (Test-DockerCompose)) {
    exit 1
}

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
Set-Location $PSScriptRoot

switch ($Action) {
    "start" {
        Start-MonitoringStack -Profile $Profile
    }
    "stop" {
        Stop-MonitoringStack
    }
    "restart" {
        Restart-MonitoringStack -Profile $Profile
    }
    "status" {
        Show-Status
    }
    "logs" {
        Show-Logs -Service $Service
    }
    "cleanup" {
        Cleanup-MonitoringStack
    }
}

Write-ColorOutput "`nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'Get-Help .\manage-monitoring.ps1' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏" $Blue