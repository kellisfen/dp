# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Data Source

Write-Host "=== –ò–ú–ü–û–†–¢ –î–ê–®–ë–û–†–î–ê NODE EXPORTER FULL (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ===" -ForegroundColor Cyan
Write-Host ""

$GRAFANA_URL = "http://62.84.112.42:3000"
$GRAFANA_USER = "admin"
$GRAFANA_PASSWORD = "DevOps2025!"
$DASHBOARD_ID = 1860

$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${GRAFANA_USER}:${GRAFANA_PASSWORD}"))
$headers = @{
    "Authorization" = "Basic $base64AuthInfo"
    "Content-Type" = "application/json"
}

Write-Host "1. –ü–æ–ª—É—á–µ–Ω–∏–µ Data Source Prometheus..." -ForegroundColor Yellow
try {
    $datasources = Invoke-RestMethod -Uri "$GRAFANA_URL/api/datasources" -Method Get -Headers $headers
    $prometheus = $datasources | Where-Object { $_.name -eq "Prometheus" -and $_.type -eq "prometheus" } | Select-Object -First 1
    
    if ($prometheus) {
        Write-Host "   ‚úÖ Prometheus –Ω–∞–π–¥–µ–Ω (UID: $($prometheus.uid))" -ForegroundColor Green
        $PROMETHEUS_UID = $prometheus.uid
    } else {
        Write-Host "   ‚ùå Prometheus Data Source –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "   ‚ùå –û—à–∏–±–∫–∞: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞..." -ForegroundColor Yellow
try {
    $dashboardJson = Invoke-RestMethod -Uri "https://grafana.com/api/dashboards/$DASHBOARD_ID/revisions/latest/download" -Method Get -TimeoutSec 30
    Write-Host "   ‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–∫–∞—á–∞–Ω" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå –û—à–∏–±–∫–∞: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞..." -ForegroundColor Yellow

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –∑–∞–º–µ–Ω—ã datasource –≤ –æ–±—ä–µ–∫—Ç–µ
function Replace-DataSource {
    param($obj, $uid)
    
    if ($obj -is [System.Collections.IDictionary]) {
        foreach ($key in @($obj.Keys)) {
            if ($key -eq "datasource") {
                if ($obj[$key] -is [string]) {
                    $obj[$key] = @{ type = "prometheus"; uid = $uid }
                } elseif ($obj[$key] -is [System.Collections.IDictionary]) {
                    $obj[$key]["uid"] = $uid
                    $obj[$key]["type"] = "prometheus"
                }
            } else {
                Replace-DataSource $obj[$key] $uid
            }
        }
    } elseif ($obj -is [System.Collections.IEnumerable] -and $obj -isnot [string]) {
        foreach ($item in $obj) {
            Replace-DataSource $item $uid
        }
    }
}

# –ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö datasource –Ω–∞ –Ω–∞—à Prometheus
Replace-DataSource $dashboardJson $PROMETHEUS_UID

# –£–¥–∞–ª–µ–Ω–∏–µ __inputs –∏ __requires
$dashboardJson.PSObject.Properties.Remove('__inputs')
$dashboardJson.PSObject.Properties.Remove('__requires')

# –£–¥–∞–ª–µ–Ω–∏–µ id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
$dashboardJson.PSObject.Properties.Remove('id')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ uid –≤ null –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
$dashboardJson | Add-Member -NotePropertyName "uid" -NotePropertyValue $null -Force

Write-Host "   ‚úÖ –î–∞—à–±–æ—Ä–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω" -ForegroundColor Green

Write-Host ""
Write-Host "4. –ò–º–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞..." -ForegroundColor Yellow

$importPayload = @{
    dashboard = $dashboardJson
    overwrite = $true
    folderId = 0
} | ConvertTo-Json -Depth 100 -Compress

try {
    $result = Invoke-RestMethod -Uri "$GRAFANA_URL/api/dashboards/db" -Method Post -Headers $headers -Body $importPayload -TimeoutSec 30
    Write-Host "   ‚úÖ –î–∞—à–±–æ—Ä–¥ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!" -ForegroundColor Green
    Write-Host "   Dashboard UID: $($result.uid)" -ForegroundColor White
    Write-Host "   Dashboard URL: $GRAFANA_URL$($result.url)" -ForegroundColor White
    
    $dashboardUrl = "$GRAFANA_URL$($result.url)"
} catch {
    Write-Host "   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: $_" -ForegroundColor Red
    if ($_.Exception.Response) {
        $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
        $responseBody = $reader.ReadToEnd()
        Write-Host "   –î–µ—Ç–∞–ª–∏: $responseBody" -ForegroundColor Yellow
    }
    exit 1
}

Write-Host ""
Write-Host "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞..." -ForegroundColor Yellow
try {
    $dashboard = Invoke-RestMethod -Uri "$GRAFANA_URL/api/dashboards/uid/$($result.uid)" -Method Get -Headers $headers
    $panelsCount = $dashboard.dashboard.panels.Count
    Write-Host "   ‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç $panelsCount –ø–∞–Ω–µ–ª–µ–π" -ForegroundColor Green
} catch {
    Write-Host "   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—à–±–æ—Ä–¥" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "=== –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===" -ForegroundColor Green
Write-Host ""
Write-Host "üìä –î–∞—à–±–æ—Ä–¥ 'Node Exporter Full' –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!" -ForegroundColor Cyan
Write-Host ""
Write-Host "üåê URL –¥–∞—à–±–æ—Ä–¥–∞:" -ForegroundColor Yellow
Write-Host "   $dashboardUrl" -ForegroundColor White
Write-Host ""
Write-Host "üí° –ß—Ç–æ –¥–∞–ª—å—à–µ:" -ForegroundColor Cyan
Write-Host "   1. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ" -ForegroundColor White
Write-Host "   2. –í –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ 'Host'" -ForegroundColor White
Write-Host "   3. –ò–∑—É—á–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏: CPU, Memory, Disk, Network" -ForegroundColor White
Write-Host "   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (Last 5 minutes, Last 1 hour, etc.)" -ForegroundColor White
Write-Host "   5. –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (5s, 10s, 30s, 1m)" -ForegroundColor White
Write-Host ""

$openBrowser = Read-Host "–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ? (y/n)"
if ($openBrowser -eq "y" -or $openBrowser -eq "Y") {
    Start-Process $dashboardUrl
    Write-Host "‚úÖ –î–∞—à–±–æ—Ä–¥ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ" -ForegroundColor Green
}

Write-Host ""
Write-Host "–ì–æ—Ç–æ–≤–æ! üéâ" -ForegroundColor Green

